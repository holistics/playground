Dashboard aql_tutorial {
  title: 'AQL Tutorial'
  description: ''''''

  view: CanvasLayout {
    label: 'View 1'
    height: 2100
    grid_size: 15
    block t1 {
      position: pos(30, 30, 1140, 345)
    }
    block v1 {
      position: pos(30, 645, 390, 310)
    }
    block v2 {
      position: pos(450, 645, 370, 310)
    }
    block t2 {
      position: pos(30, 555, 540, 60)
    }
    block t3 {
      position: pos(30, 1005, 570, 100)
    }
    block v3 {
      position: pos(30, 1110, 390, 310)
    }
    block v4 {
      position: pos(450, 1110, 620, 310)
    }
    block t4 {
      position: pos(30, 1455, 570, 75)
    }
    block v5 {
      position: pos(30, 1530, 390, 280)
    }
    block v6 {
      position: pos(450, 1530, 520, 250)
    }
    block t5 {
      position: pos(30, 405, 1140, 165)
    }
    block t6 {
      position: pos(30, 1800, 1140, 255)
    }
  }
  block t1: TextBlock {
    content: @md # AQL Tutorial

Welcome to the AQL Tutorial! 

This interactive guide offers examples ranging from easy to difficult, helping you become familiar with AQL. 

For more in-depth information, explore additional resources available [here](https://docs.holistics.io/as-code/aql/getting-started).

This tutorial consists of four levels:

1. **Basic Understanding**: Learn AQL fundamentals and simple calculations.

2. **Intermediate Skills**: Use multiple clauses and perform aggregations.

3. **Advanced Applications**: Master complex queries, advanced analytical concepts, and performance optimization techniques.

4. **Expert Mastery**: Craft sophisticated queries and implement advanced analytics.


Letâ€™s get started! ðŸ™Œ;;
  }
  block v1: VizBlock {
    label: 'Simple Aggregation (Intial)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block v2: VizBlock {
    label: 'Simple Aggregation (Result)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      calculation f_c5892a6 {
        label: 'Total Users per Country'
        formula: @aql count(demo.dim_users.id);;
        calc_type: 'measure'
        data_type: 'number'
      }
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        },
        VizFieldFull {
          ref: 'f_c5892a6'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block t2: TextBlock {
    content: @md ### 1.1 Simple Aggregation

You can aggregate values of columns within a model;;
  }
  block t3: TextBlock {
    content: @md ### 1.2 Aggregation with Scalar Functions

You can aggregate values and then perform scalar operations (addition, subtraction, multiplication, division) on these aggregations.;;
  }
  block v3: VizBlock {
    label: 'Aggregation with Scalar Functions (Initial)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block v4: VizBlock {
    label: 'Aggregation with Scalar Functions (Result)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      calculation f_7eafbc0 {
        label: 'Total users'
        formula: @aql count(demo.dim_users.id);;
        calc_type: 'measure'
        data_type: 'number'
      }
      calculation f_f9c8103 {
        label: 'Total Orders'
        formula: @aql count(demo.fct_order_items.id);;
        calc_type: 'measure'
        data_type: 'number'
      }
      calculation f_1c4966c {
        label: 'Order Per Users'
        formula: @aql count(demo.fct_order_items.id) * 1.0 / count(demo.dim_users.id);;
        calc_type: 'measure'
        data_type: 'number'
      }
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        },
        VizFieldFull {
          ref: 'f_7eafbc0'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        },
        VizFieldFull {
          ref: 'f_f9c8103'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        },
        VizFieldFull {
          ref: 'f_1c4966c'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block t4: TextBlock {
    content: @md ### 1.3 Conditions

You can apply conditions when calculating metrics;;
  }
  block v5: VizBlock {
    label: 'Conditions (Initial)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      calculation f_a24a2c2 {
        label: 'total orders'
        formula: @aql count(demo.fct_order_items.id);;
        calc_type: 'measure'
        data_type: 'number'
      }
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        },
        VizFieldFull {
          ref: 'f_a24a2c2'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block v6: VizBlock {
    label: 'Conditions (Result)'
    viz: DataTable {
      dataset: demo.ds_ecommerce
      calculation f_a24a2c2 {
        label: 'total orders with value more than $100'
        formula: @aql count(demo.fct_order_items.id) | where(demo.fct_order_items.value > 150);;
        calc_type: 'measure'
        data_type: 'number'
      }
      fields: [
        VizFieldFull {
          ref: ref('demo.dim_product_countries', 'name')
          format {
            type: 'text'
          }
        },
        VizFieldFull {
          ref: 'f_a24a2c2'
          format {
            type: 'number'
            pattern: 'inherited'
          }
        }
      ]
      settings {
        show_row_number: true
        row_limit: 5000
      }
    }
  }
  block t5: TextBlock {
    content: @md ## 1. Basic AQL Understanding

---

Gain a foundational understanding of AQL, including its primary purpose and basic syntax. You will learn to perform simple calculations and aggregations, such as summing two columns (e.g., revenue from different product lines), calculating percentages (e.g., profit margin), counting distinct values (e.g., unique customers), and filtering data based on simple conditions (e.g., sales by region).

;;
  }
  block t6: TextBlock {
    content: @md ## 2. Intermediate Skills (WIP)

---

![](https://media1.tenor.com/m/iCqG_iT-h48AAAAC/bills-ugh.gif);;
  }
}