Model dim_product_cities = dim_cities.extend(
  {
    label: 'Product City'
  }
)
Model dim_product_countries = dim_countries.extend(
  {
    label: 'Product Country'
  }
)

Model dim_user_cities = dim_cities.extend(
  {
    label: 'User City'
  }
)
Model dim_user_countries = dim_countries.extend(
  {
    label: 'User Country'
  }
)

Dataset ds_ecommerce {
  label: 'Demo Ecommerce'
  description: 'Ecommerce dataset. ERD can be found [here](https://dbdiagram.io/e/658b9f1289dea62799972ec8/665fedfcb65d933879884fa8)'
  data_source_name: 'demo_pg'
  owner: 'triet.lq@holistics.io'

  models: [
    fct_order_items,
    fct_orders,

    dim_dates,
    dim_products,
    dim_users,
    dim_categories,
    dim_merchants,
    dim_product_img,

    dim_product_cities,
    dim_product_countries,
    dim_user_cities,
    dim_user_countries,

    user_cohort_retention, // to be removed

  ]
  relationships: [


    relationship(demo.fct_order_items.product_id > demo.dim_products.id, true),
    relationship(demo.fct_order_items.category_id > demo.dim_categories.id, true),

    relationship(demo.fct_order_items.merchant_id > demo.dim_merchants.id, true),
    relationship(demo.fct_order_items.merchant_city_id > demo.dim_product_cities.id, true),
    relationship(demo.fct_order_items.merchant_country_code > demo.dim_product_countries.code, true),
    relationship(demo.fct_order_items.user_id > demo.dim_users.id, true),
    relationship(demo.fct_order_items.created_date > demo.dim_dates.date_key, true),
    relationship(demo.fct_order_items.order_id > demo.fct_orders.id, false),


    relationship(demo.fct_orders.user_city_id > demo.dim_user_cities.id, true),
    relationship(demo.fct_orders.user_country_code > demo.dim_user_countries.code, true),
    relationship(demo.fct_orders.created_date > demo.dim_dates.date_key, true),
    relationship(demo.fct_orders.user_id > demo.dim_users.id, false),

    relationship(demo.dim_product_img.product_id - demo.dim_products.id, true),

    relationship(demo.dim_users.sign_up_date > demo.dim_dates.date_key, false),

  ]

  dimension acquisition_month_cohort {
    model: dim_users
    label: 'Acquisition Month Cohort'
    type: 'date'
    definition: @aql dimensionalize(min(demo.fct_order_items.created_at | month()), demo.dim_users.id) ;;
  }

  dimension month_no {
    model: fct_order_items
    label: 'Month Number'
    type: 'number'
    definition: @aql 
    date_diff('month', (demo.dim_users.acquisition_month_cohort), (demo.fct_order_items.created_at | month()) ) ;;
  }
  dimension is_buyer {
    label: "Is Buyer"
    type: "truefalse"
    hidden: false
    description: ""
    definition: @aql case(
  when: demo.dim_users.total_oders_of_user > 0
  , then: true
  , else: false
);;
    model: demo.dim_users
  }
  dimension total_oders_of_user {
    label: "Total Oders Of User"
    type: "number"
    hidden: false
    description: ""
    definition: @aql demo.fct_orders 
  | count_distinct(demo.fct_orders.id)
  | dimensionalize(demo.dim_users.id)
  | coalesce(0);;
    model: demo.dim_users
  }
  dimension is_repeated_buyer {
    label: "Is Repeated Buyer"
    type: "truefalse"
    hidden: false
    description: ""
    definition: @aql case(
  when: demo.dim_users.total_oders_of_user > 300
  , then: true
  , else: false
);;
    model: demo.dim_users
  }

  metric count_users {
    label: 'Count Users'
    type: 'number'
    definition: @aql count(demo.dim_users.id);;
  }

  metric count_orders {
    label: 'Count Orders'
    type: 'number'
    definition: @aql count(demo.fct_orders.id) | with_relationships(demo.fct_orders.user_id >  demo.dim_users.id);;
  }

  metric count_distinct_orders {
    label: 'Count Distinct Orders'
    type: 'number'
    definition: @aql count_distinct(demo.fct_order_items.order_id) ;;
  }

  metric count_distinct_products {
    label: 'Count Distinct Products'
    type: 'number'
    definition: @aql count_distinct(demo.fct_order_items.product_id) ;;
  }

  metric gmv {
    label: "GMV - Gross Merchandise Value"
    type: "number"
    description: "Total value regardless of order status"
    definition: @aql sum(demo.fct_order_items.value);;
  }

  metric aov {
    label: "AOV - Average Order Value"
    type: 'number'
    definition: @aql gmv/count_orders;;
  }

  metric cohort_retention {
    label: 'Cohort Retention'
    type: 'number'
    definition: @aql (count_users*1.0) / (count_users | of_all(demo.fct_order_items.month_no));;
  }
}